// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String?
  googleId   String?  @unique
  isVerified Boolean  @default(false)
  role       String   @default("user")
  createdAt  DateTime @default(now())

  bookings      Booking[]
  verifications Verification[]
  feedbacks     Feedback[]

  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
}

model Verification {
  id     Int    @id @default(autoincrement())
  userId Int
  otp    String
  user   User   @relation(fields: [userId], references: [id])
}

model Service {
  id       Int       @id @default(autoincrement())
  title    String
  image    String
  bookings Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  category  String
  date      String
  time      String
  address   String
  price     Float
  status    String
  otp       String?
  createdAt DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id])
  service   Service    @relation(fields: [serviceId], references: [id])
  feedbacks Feedback[] // âœ… back-reference to Feedback
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookingId Int? // optional for now
  userName  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  sender    String
  text      String
  sessionId String // <-- make sure it's just String, not UUID or Bytes
  timestamp DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime @default(now())
}
